#pragma kernel Normal
#pragma kernel Mul
#pragma kernel Screen
#pragma kernel Overlay
#pragma kernel HardLight
#pragma kernel SoftLight
#pragma kernel ColorDodge
#pragma kernel ColorBurn
#pragma kernel LinearBurn
#pragma kernel VividLight
#pragma kernel LinearLight
#pragma kernel Divide
#pragma kernel Addition
#pragma kernel Subtract
#pragma kernel Difference
#pragma kernel DarkenOnly
#pragma kernel LightenOnly
#pragma kernel Hue
#pragma kernel Saturation
#pragma kernel Color
#pragma kernel Luminosity
#pragma kernel AlphaLerp

#include "./BlendTextureHelper.hlsl"
#include "./TransHelper.hlsl"


uint Size;
RWStructuredBuffer<float4> BaseTex;
RWStructuredBuffer<float4> AddTex;

[numthreads(32, 32, 1)] void Normal(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float2 Alpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w);
  float4 ResultColor = (AddColor * AddColor.w) + ((BaseColor * BaseColor.w) * Alpha.y);
  ResultColor.w = Alpha.x;
  BaseTex[OneDIndex] = ResultColor;
}
[numthreads(32, 32, 1)] void Mul(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;
  float4 MulColor = BaseColor * AddColor;
  float4 ResultColor = lerp(BaseColor, MulColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}
[numthreads(32, 32, 1)] void Screen(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;
  float4 BlendColor = OneColor - (OneColor - BaseColor )* (OneColor - AddColor);
  float4 ResultColor = lerp(BaseColor, BlendColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}
[numthreads(32, 32, 1)] void Overlay(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;

  float4 MulColor = 2 *  BaseColor * AddColor;
  float4 ScreenColor = OneColor - (OneColor - BaseColor )* (OneColor - AddColor);
  float4 BlendColor = lerp(MulColor,ScreenColor,(1 - step(BaseColor.w, 0.5)));

  float4 ResultColor = lerp(BaseColor, BlendColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}
[numthreads(32, 32, 1)] void HardLight(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;

  float4 MulColor = 2 *  BaseColor * AddColor;
  float4 ScreenColor = OneColor - (OneColor - BaseColor )* (OneColor - AddColor);
  float4 BlendColor = lerp(MulColor,ScreenColor,(1 - step(AddColor.z, 0.5)));

  float4 ResultColor = lerp(BaseColor, BlendColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}
[numthreads(32, 32, 1)] void SoftLight(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;

  float4 BlendColor = (OneColor - 2 * AddColor) * (BaseColor * BaseColor) + 2 * BaseColor * AddColor;

  float4 ResultColor = lerp(BaseColor, BlendColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}
[numthreads(32, 32, 1)] void ColorDodge(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;

  float4 BlendColor = float4(
    saturate(BaseColor.x / (1 - AddColor.x)),
    saturate(BaseColor.y / (1 - AddColor.y)),
    saturate(BaseColor.z / (1 - AddColor.z)),
    1
  );

  float4 ResultColor = lerp(BaseColor, BlendColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}
[numthreads(32, 32, 1)] void ColorBurn(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;

    float4 BlendColor = float4(
    1 - saturate((1 - BaseColor.x) / AddColor.x),
    1 - saturate((1 - BaseColor.y) / AddColor.y),
    1 - saturate((1 - BaseColor.z) / AddColor.z),
    1
  );

  float4 ResultColor = lerp(BaseColor, BlendColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}
[numthreads(32, 32, 1)] void LinearBurn(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;

  float4 BlendColor = BaseColor + AddColor - OneColor;

  float4 ResultColor = lerp(BaseColor, BlendColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}

[numthreads(32, 32, 1)] void VividLight(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;

  float4 Dodge = float4(
    saturate(1 - (1 - BaseColor.r) / (2 * AddColor.r)),
    saturate(1 - (1 - BaseColor.g) / (2 * AddColor.g)),
    saturate(1 - (1 - BaseColor.b) / (2 * AddColor.b)),
    1
  );
  float4 Burn = float4(
   saturate( BaseColor.r / (1 - 2 * (AddColor.r - 0.5))),
    saturate(BaseColor.g / (1 - 2 * (AddColor.g - 0.5))),
    saturate(BaseColor.b / (1 - 2 * (AddColor.b - 0.5))),
    1
  );
  float4 BlendColor = float4(
    lerp(Dodge.x,Burn.x,(1 - step(AddColor.x, 0.5))),
    lerp(Dodge.y,Burn.y,(1 - step(AddColor.y, 0.5))),
    lerp(Dodge.z,Burn.z,(1 - step(AddColor.z, 0.5))),
    1
  );

  float4 ResultColor = lerp(BaseColor, BlendColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}
[numthreads(32, 32, 1)] void LinearLight(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;
  float4 BlendColor = BaseColor + (2 * AddColor) - OneColor;
  float4 ResultColor = lerp(BaseColor, BlendColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}
[numthreads(32, 32, 1)] void Divide(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;
  float4 BlendColor = float4(
    saturate(BaseColor.x / AddColor.x),
    saturate(BaseColor.y / AddColor.y),
    saturate(BaseColor.z / AddColor.z),
    1
  );
  float4 ResultColor = lerp(BaseColor, BlendColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}
[numthreads(32, 32, 1)] void Addition(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;
  float4 BlendColor = float4(
    saturate(BaseColor.x + AddColor.x),
    saturate(BaseColor.y + AddColor.y),
    saturate(BaseColor.z + AddColor.z),
    1
  );
  float4 ResultColor = lerp(BaseColor, BlendColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}[numthreads(32, 32, 1)] void Subtract(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;
  float4 BlendColor = float4(
    saturate(BaseColor.x - AddColor.x),
    saturate(BaseColor.y - AddColor.y),
    saturate(BaseColor.z - AddColor.z),
    1
  );
  float4 ResultColor = lerp(BaseColor, BlendColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}[numthreads(32, 32, 1)] void Difference(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;
  float4 BlendColor = float4(
    abs(BaseColor.x - AddColor.x),
    abs(BaseColor.y - AddColor.y),
    abs(BaseColor.z - AddColor.z),
    1
  );
  float4 ResultColor = lerp(BaseColor, BlendColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}[numthreads(32, 32, 1)] void DarkenOnly(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;
  float4 BlendColor = float4(
    min(BaseColor.x ,AddColor.x),
    min(BaseColor.y , AddColor.y),
    min(BaseColor.z , AddColor.z),
    1
  );
  float4 ResultColor = lerp(BaseColor, BlendColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}[numthreads(32, 32, 1)] void LightenOnly(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;
  float4 BlendColor = float4(
    max(BaseColor.x , AddColor.x),
    max(BaseColor.y , AddColor.y),
    max(BaseColor.z , AddColor.z),
    1
  );
  float4 ResultColor = lerp(BaseColor, BlendColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}[numthreads(32, 32, 1)] void Hue(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;
  float3 BaseHSV = RGBtoHSV((float3)BaseColor);
  float3 AddHSV = RGBtoHSV((float3)AddColor);
  float4 BlendColor = AsFloat4(HSVtoRGB(float3(AddHSV.x,BaseHSV.y,BaseHSV.z)));
  float4 ResultColor = lerp(BaseColor, BlendColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}[numthreads(32, 32, 1)] void Saturation(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;
  float3 BaseHSV = RGBtoHSV((float3)BaseColor);
  float3 AddHSV = RGBtoHSV((float3)AddColor);
  float4 BlendColor = AsFloat4(HSVtoRGB(float3(BaseHSV.x,AddHSV.y,BaseHSV.z)));
  float4 ResultColor = lerp(BaseColor, BlendColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}[numthreads(32, 32, 1)] void Color(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;
  float3 BaseHSV = RGBtoHSV((float3)BaseColor);
  float3 AddHSV = RGBtoHSV((float3)AddColor);
  float4 BlendColor = AsFloat4(HSVtoRGB(float3(AddHSV.x,AddHSV.y,BaseHSV.z)));
  float4 ResultColor = lerp(BaseColor, BlendColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}[numthreads(32, 32, 1)] void Luminosity(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float FinalAlpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w).x;
  float3 BaseHSV = RGBtoHSV((float3)BaseColor);
  float3 AddHSV = RGBtoHSV((float3)AddColor);
  float4 BlendColor = AsFloat4(HSVtoRGB(float3(BaseHSV.x,BaseHSV.y,AddHSV.z)));
  float4 ResultColor = lerp(BaseColor, BlendColor, AddColor.w);
  ResultColor.w = FinalAlpha;
  BaseTex[OneDIndex] = ResultColor;
}
[numthreads(32, 32, 1)] void AlphaLerp(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  float2 Alpha = FinalAlphaAndReversCal(BaseColor.w, AddColor.w);
  float4 ResultColor = lerp(BaseColor, AddColor, AddColor.w / (AddColor.w +( Alpha.y * BaseColor.w )));
  ResultColor.w = Alpha.x;
  BaseTex[OneDIndex] = ResultColor;
}