#pragma kernel NotWrap
#pragma kernel Stretch
#pragma kernel Loop

#include "./TransCompilerHelper.hlsl"

RWStructuredBuffer<float4> Source;
uint2 SourceTexSize;


RWStructuredBuffer<float4> Target;
RWStructuredBuffer<float> TargetDistansMap;

uint2 TargetTexSize;
bool IsOutRange;
float2 OutRange;

RWStructuredBuffer<float3> AtlasMap;

[numthreads(32, 32, 1)] void NotWrap(uint3 id
                                     : SV_DispatchThreadID) {
  uint TOneDIndex = TwoDToOneDIndex((uint2)id, TargetTexSize.x);

  float3 AtlasMapNawPixsel = AtlasMap[TOneDIndex];
  float TargetDistansNawPixsel = TargetDistansMap[TOneDIndex];
  float IsWiret = 1 - step(AtlasMapNawPixsel.z, TargetDistansNawPixsel); // A > T

  float IsOutPos = 1 - max(
      max(1 - step(0, AtlasMapNawPixsel.x), 1 - step(AtlasMapNawPixsel.x, 1)),
      max(1 - step(0, AtlasMapNawPixsel.y), 1 - step(AtlasMapNawPixsel.y, 1)));
  float2 Pos = saturate(AtlasMapNawPixsel.xy);

  float4 SousePicColor = lerp(
        Target[TOneDIndex],
        GetColorBiliner(Source, SourceTexSize, Pos),
        IsOutPos);

  if (IsOutRange)
  {
    float Rangeflag = 0;
    Rangeflag = max(Rangeflag, step(0.5f + OutRange.x ,abs(AtlasMapNawPixsel.x - 0.5))); // with
    Rangeflag = max(Rangeflag, step(0.5f + OutRange.y ,abs(AtlasMapNawPixsel.y- 0.5))); // haith

    Rangeflag  = 1 - Rangeflag;
    IsWiret *= Rangeflag;

  }

  Target[TOneDIndex] = lerp(Target[TOneDIndex], SousePicColor, IsWiret);
  TargetDistansMap[TOneDIndex] = lerp(TargetDistansNawPixsel, AtlasMapNawPixsel.z, IsWiret);
}

[numthreads(32, 32, 1)] void Stretch(uint3 id
                                     : SV_DispatchThreadID) {
  uint TOneDIndex = TwoDToOneDIndex((uint2)id, TargetTexSize.x);

  float3 AtlasMapNawPixsel = AtlasMap[TOneDIndex];
  float TargetDistansNawPixsel = TargetDistansMap[TOneDIndex];
  float IsWiret = 1 - step(AtlasMapNawPixsel.z, TargetDistansNawPixsel); // A > T

  float2 Pos = saturate(AtlasMapNawPixsel.xy);

  float4 SousePicColor = GetColorBiliner(Source, SourceTexSize, Pos);

  if (IsOutRange)
  {
    float Rangeflag = 0;
    Rangeflag = max(Rangeflag, step(0.5f + OutRange.x ,abs(AtlasMapNawPixsel.x - 0.5))); // with
    Rangeflag = max(Rangeflag, step(0.5f + OutRange.y ,abs(AtlasMapNawPixsel.y - 0.5))); // haith

    Rangeflag  = 1 - Rangeflag;
    IsWiret *= Rangeflag;

  }

  Target[TOneDIndex] = lerp(Target[TOneDIndex], SousePicColor, IsWiret);
  TargetDistansMap[TOneDIndex] = lerp(TargetDistansNawPixsel, AtlasMapNawPixsel.z, IsWiret);
}

[numthreads(32, 32, 1)] void Loop(uint3 id
                                     : SV_DispatchThreadID) {
  uint TOneDIndex = TwoDToOneDIndex((uint2)id, TargetTexSize.x);

  float3 AtlasMapNawPixsel = AtlasMap[TOneDIndex];
  float TargetDistansNawPixsel = TargetDistansMap[TOneDIndex];
  float IsWiret = 1 - step(AtlasMapNawPixsel.z, TargetDistansNawPixsel); // A > T

  float2 Pos = float2(AtlasMapNawPixsel.x % 1.0f, AtlasMapNawPixsel.y % 1.0f);

  float4 SousePicColor = GetColorBiliner(Source, SourceTexSize, Pos);

  if (IsOutRange)
  {
    float Rangeflag = 0;
    Rangeflag = max(Rangeflag, step(0.5f + OutRange.x ,abs(AtlasMapNawPixsel.x - 0.5))); // with
    Rangeflag = max(Rangeflag, step(0.5f + OutRange.y ,abs(AtlasMapNawPixsel.y - 0.5))); // haith

    Rangeflag  = 1 - Rangeflag;
    IsWiret *= Rangeflag;
  }

  Target[TOneDIndex] = lerp(Target[TOneDIndex], SousePicColor, IsWiret);
  TargetDistansMap[TOneDIndex] = lerp(TargetDistansNawPixsel, AtlasMapNawPixsel.z, IsWiret);
}
